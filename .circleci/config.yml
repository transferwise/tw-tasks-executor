version: 2

references:
  container_config: &container_config
    docker:
    - image: arti.tw.ee/circle_openjdk8:latest
      user: circleci
    - image: circleci/mariadb:10.3
      name: mysql1
      command: mysqld --max_allowed_packet=32m --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      environment:
        MYSQL_ROOT_PASSWORD: example-password-change-me
        MYSQL_DATABASE: tw-tasks-test
    - image: circleci/postgres:10
      name: postgres1
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: example-password-change-me
    - image: bitnami/zookeeper:3.5.5
      name: zk-service1
      environment:
        ALLOW_ANONYMOUS_LOGIN: "yes"
        JVMFLAGS: "-Xmx512m -Xms64m"
    - image: bitnami/zookeeper:3.4.14
      name: zk1
      environment:
        ALLOW_ANONYMOUS_LOGIN: "yes"
        JVMFLAGS: "-Xmx512m -Xms64m"
    - image: wurstmeister/kafka:2.12-2.2.0
      name: kafka1
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zk1:2181
        KAFKA_LISTENERS: PLAINTEXT://:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_MESSAGE_MAX_BYTES: '10000012'
        KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 20000
        KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "true"
        KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 5
    resource_class: medium
    environment:
      TERM: vt100
      GRADLE_OPTS: '-Dorg.gradle.console=plain'

jobs:
  test:
    <<: *container_config
    steps:
    - checkout
    - restore_cache:
        key: tw-tasks-executor-gradle-v1-{{ checksum "build.gradle" }}-{{ checksum "gradle.properties" }}
    - run:
        name: Run tests
        command: ./gradlew --refresh-dependencies clean check -Dspring.profiles.include=circle --console=plain --no-daemon --stacktrace
    - save_cache:
        paths:
          - ~/.gradle/
        key: tw-tasks-executor-gradle-v1-{{ checksum "build.gradle" }}-{{ checksum "gradle.properties" }}
    - store_test_results:
        path: ./integration-tests/build/test-results/
    - store_test_results:
        path: ./tw-tasks-core/build/test-results/
    - store_test_results:
        path: ./tw-tasks-core-spring-boot-starter/build/test-results/
    - store_test_results:
        path: ./tw-tasks-core-test/build/test-results/
    - store_test_results:
        path: ./tw-tasks-incidents/build/test-results/
    - store_test_results:
        path: ./tw-tasks-incidents-spring-boot-starter/build/test-results/
    - store_test_results:
        path: ./tw-tasks-jobs/build/test-results/
    - store_test_results:
        path: ./tw-tasks-jobs-spring-boot-starter/build/test-results/
    - store_test_results:
        path: ./tw-tasks-jobs-test/build/test-results/
    - store_test_results:
        path: ./tw-tasks-kafka-listener/build/test-results/
    - store_test_results:
        path: ./tw-tasks-kafka-listener-spring-boot-starter/build/test-results/
    - store_test_results:
        path: ./tw-tasks-kafka-publisher/build/test-results/
    - store_test_results:
        path: ./tw-tasks-kafka-publisher-spring-boot-starter/build/test-results/
    - store_test_results:
        path: ./tw-tasks-kafka-publisher-test/build/test-results/
    - store_test_results:
        path: ./tw-tasks-management/build/test-results/
    - store_test_results:
        path: ./tw-tasks-management-spring-boot-starter/build/test-results/
    - run:
        name: gather reports
        command: |
          tar -zcvf ~/reports.tar.gz $( find . -type f -regex '.*/build/reports/.*' )
        when: always
    - store_artifacts:
        path: ~/reports.tar.gz
        target: reports
        when: always
    - save_cache:
        # here we save the .gradle folder, so we can reuse it in the later steps and also later builds.
        key: gradle-cache-{{ checksum "build.gradle" }}
        paths:
        - "~/.gradle"

workflows:
  version: 2
  test:
    jobs:
    - test
