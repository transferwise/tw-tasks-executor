demoapp:
  node-id: ${tw-tasks.core.clientIdFromHostname}

server:
  port: 12345
  tomcat.max-threads: 30

spring:
  datasource:
    url: jdbc:postgresql://host.local:15432/postgres
    username: postgres
    password: example-password-change-me
    tomcat:
      max-active: 30
      max-idle: 30
      min-idle: 0
      initial-size: 1
      validation-query: SELECT 1
      validation-query-timeout: 5
      validation-interval: 5000
      test-on-borrow: true
      test-on-return: false
      test-on-connect: true
      test-while-idle: true
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 120000
      jmx-enabled: true
      log-validation-errors: true
      log-abandoned: true
      suspect-timeout: 120
      max-age: 86400000
      default-transaction-isolation: 2
      abandon-when-percentage-full: 80
      remove-abandoned: true
      remove-abandoned-timeout: 240
      max-wait: 600000
      jdbc-interceptors: ConnectionState;QueryTimeoutInterceptor(queryTimeout=60);SlowQueryReport(threshold=10000,maxQueries=0)
  kafka:
    bootstrap-servers: host.local:9092
    client-id: ${demoapp.node-id}
    properties:
      session.timeout.ms: 30000
      request.timeout.ms: 60000
    producer:
      acks: 'all'
      retries: 1
      batch-size: 163840
      max-request-size: 10485760
      max-in-flight-requests-per-connection: 50
    consumer:
      groupId: 'demoapp'
      autoOffsetReset: 'earliest'
      enableAutoCommit: false
  aop:
    proxy-target-class: true

tw-tasks:
  core:
    group-id: 'demoapp'
    client-id: ${demoapp.node-id}
    stuck-tasks-polling-interval: PT5M
    task-stuck-timeout: PT2M
    waiting-tasks-polling-interval: PT0.1s
    db-type: POSTGRES
    zookeeper-connect-string: host.local:2183
    topic-replication-factor: 1
    max-node-count: 1
    additional-processing-buckets:
      - emails
    configure-kafka-topics: true
    trigger-same-task-in-all-nodes: true

spring.liquibase.change-log: 'classpath:db/changelog/db.tw-tasks-postgres.xml'

zookeeper:
  connect-string: host.local:2181

loggingFile: logs/demoapp.log

management:
  endpoint:
    prometheus:
      enabled: true
    health:
      enabled: true
      show-details: always

  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      prometheus:
        enabled: true
---

spring:
  profiles: node1

server:
  port: 12222

---

spring:
  profiles: node2

server:
  port: 12223

demoapp:
  node-id: '2'

loggingFile: logs2/demoapp.log

---

spring:
  profiles: mysql
  datasource:
    url: jdbc:mysql://localhost:13306/demoapp?characterEncoding=UTF-8&rewriteBatchedStatements=true&useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: example-password-change-me
tw-tasks.core:
  db-type: MYSQL

spring.liquibase.change-log: 'classpath:db/changelog/db.tw-tasks-mysql.xml'

---

# Designed to used as mysql,mariadb
spring:
  profiles: mariadb
  datasource:
    url: jdbc:mariadb://localhost:13307/demoapp?rewriteBatchedStatements=false&useSSL=false&useServerPrepStmts=true&userCompression=true
