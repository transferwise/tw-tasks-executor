import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = "com.transferwise.tasks"

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"

apply from: "../build.libraries.gradle"

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    all {
        exclude(group: 'junit', module: 'junit')
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')

        resolutionStrategy {
            failOnVersionConflict()
            preferProjectModules()
            if (System.getenv("RUNS_IN_CI") == "true") {
                // This is faster, than using Gradle's `--refresh-dependencies`, which will refresh also all non-dynamic things.
                cacheDynamicVersionsFor 10, 'minutes'
                cacheChangingModulesFor 10, 'minutes'
            }
        }
    }

    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
}

dependencies {
    local platform(libraries.springBootDependencies + '!!')
    local libraries.lombok

    annotationProcessor libraries.springBootConfigurationProcessor

    compileOnly libraries.spotbugsAnnotations
    compileOnly libraries.jakartaValidationApi

    implementation libraries.slf4j
    implementation libraries.apacheCommonsCollections
    implementation libraries.apacheCommonsLang
    implementation libraries.guava
    implementation libraries.twBaseUtils

    testCompileOnly libraries.spotbugsAnnotations

    testImplementation libraries.junitApi
    testImplementation libraries.junitEngine
    testImplementation libraries.junitParams
    testImplementation libraries.junitMockito
    testImplementation libraries.assertJCore
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(15)
    }

    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }

    // When you want to rerun tests without any changes made
    // outputs.upToDateWhen { false }

    jvmArgs("-server", "-noverify", "-Djava.security.egd=file:/dev/./urandom", "-XX:+ExplicitGCInvokesConcurrent",
            "-Xmx1g", "-XX:+HeapDumpOnOutOfMemoryError")
    useJUnitPlatform()
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"
    excludeFilter = file('../spotbugs-exclude.xml')
    reports {
        xml.required = true
        html.required = true
    }
}


tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}

