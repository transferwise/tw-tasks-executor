import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = "com.transferwise.tasks"

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "idea"
apply plugin: "com.github.spotbugs"

apply from: "../build.libraries.gradle"

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    all {
        exclude(group: 'junit', module: 'junit')
        exclude(group: 'org.junit.vintage', module: 'junit-vintage-engine')

        resolutionStrategy {
            failOnVersionConflict()
            preferProjectModules()
            if (System.getenv("RUNS_IN_CI") == "true") {
                // This is faster, than using Gradle's `--refresh-dependencies`, which will refresh also all non-dynamic things.
                cacheDynamicVersionsFor 10, 'minutes'
                cacheChangingModulesFor 10, 'minutes'
            }
        }
    }

    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
}

dependencies {
    local platform(libraries.springBootDependencies)
    local libraries.lombok

    annotationProcessor libraries.springBootConfigurationProcessor

    compileOnly libraries.spotbugsAnnotations
    compileOnly libraries.springBootConfigurationProcessor
    compileOnly libraries.jakartaValidationApi
    compileOnly libraries.javaxValidationApi

    implementation libraries.slf4j
    implementation libraries.apacheCommonsCollections
    implementation libraries.apacheCommonsLang

    implementation libraries.guava
    implementation libraries.twBaseUtils

    testCompileOnly libraries.spotbugsAnnotations

    testImplementation libraries.junitApi
    testImplementation libraries.junitEngine
    testImplementation libraries.junitParams
    testImplementation libraries.junitMockito
    testImplementation libraries.assertJCore

    if (springBootVersion.startsWith("2")) {
        /*
         Since hibernate-validator is depending on jakarta.validation:jakarta-validation-api and we are forcing the version to newer one to be able to compile for both javax and jakarta then we need to explicitly
         add the javax variation back when running in javax environment (that is spring boot 2) for the Spring Boot autoconfiguration to work.
        */
        testRuntimeOnly libraries.javaxValidationApi
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
}


test {


    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }

    // When you want to rerun tests without any changes made
    // outputs.upToDateWhen { false }

    jvmArgs("-server", "-Djava.security.egd=file:/dev/./urandom", "-XX:+ExplicitGCInvokesConcurrent",
            "-Xmx1g", "-XX:+HeapDumpOnOutOfMemoryError")
    useJUnitPlatform()
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"
    excludeFilter = file('../spotbugs-exclude.xml')
    reports {
        xml.required = true
        html.required = true
    }
}


tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}

